public interface ILinkedList {
	public void add(int index, int element);
	
	public void add(int element);

	public int get(int index);
	
	public void set(int index, int element);
	
	public void clear();
	
	public boolean isEmpty();
	
	public void remove(int index);
	
	public int size();
	
	public ILinkedList sublist(int fromIndex, int toIndex);
	
	public boolean contains(int o);


}
///////////////////////
//////////////
/////////////


public class sigleList implements ILinkedList {

 
	Node head;
	    static class Node { 
	  
	        int data; 
	        Node next; 
	  
	        // Constructor 
	        Node(int d) 
	        { 
	            data = d; 
	            next = null; 
	        } 
	    }
	
	
	public void add(int index, int element){
		Node n=new Node(element);
		if (head==null)
			head=n;
		else {
		
		Node current=head;
		for (int i=0 ; i<= index-2;i++)
			current=current.next;
		n.next=current.next;
		current.next=n;
		
	
	}
	}
	public void add(int element) {
		Node n=new Node(element);
		if (head==null)
			head=n;
		else {
		Node current;
		current = head;
		while (current.next!=null) 
			current=current.next;
		current.next = n;
		n.next = null;	
	}
	}
	public int get(int index) {
		Node current=head;
		for (int i=0;i<index;i++) {
			current=current.next;
		}
		return current.data;		
	}
	public void set(int index, int element) {
		Node current=head; 
		for (int i=0;i<index;i++) {
			current=current.next;
			
		}
		current.data=element;
	}
	public void clear() {
		  // not sure!
		head=null;
	}
	public boolean isEmpty() {
		return (head==null);
		
			
	}
	public void remove(int index) {
		Node current=head;
		if (index==0) { head=head.next; return;}
		if (index+1>size()) { System.out.println("Out Of Size");return; }
		
		for (int i=0;i<=index-2;i++)
			current=current.next;
		Node n=current.next;
		current.next=n.next;
		
	}
	public int size() {
		Node current=head; int size=0;
		while (current!=null) {
			size++; current=current.next;}
		return size;
		
			
	}
	
	public sigleList sublist(int fromIndex, int toIndex) {
		Node current=head;
		for (int i=0;i<=fromIndex-1;i++)
			current=current.next;
		sigleList l2=new sigleList();
		l2.head=current; 
		for (int i=fromIndex;i<=toIndex-1;i++)
			current=current.next;
	current.next=null;
		
		
		l2.print();
		return l2;
		
	} 
	public boolean contains(int o) {
		Node current=head;
		while (current!=null) {
			if (current.data==o) return true;
			current=current.next;
		}
		return false;
		
	}
	public void print () {
		Node current=head;
		while (current!=null) {
			System.out.println(current.data+",");
			current=current.next;
		}
	}
	
	
	



}
///////////////////////
///////////////////////
//////////////////////////
public class doubleList implements ILinkedList {
	Node head;
    static class Node { 
  
        int data; 
        Node next;
        Node prev;
  
        // Constructor 
        Node(int d) 
        { 
            data = d; 
            next = null; 
           
        } 
    }
    public void add(int element) {
    	Node n=new Node(element);
		if (head==null)
			head=n;
		else {
		Node current;
		current = head;
		while (current.next!=null) 
			current=current.next;
		current.next = n;
		n.next = null;	
		n.prev=current;
	}
    	
    }
    public void add(int index, int element){
		Node n=new Node(element);
		if (head==null)
			head=n;
		else {
		
		Node current=head;
		for (int i=0 ; i<= index-2;i++)
			current=current.next;
		n.next=current.next;
		n.prev=current;
		current.next=n;
		
	
	}
	}
    public int get(int index) {
		Node current=head;
		for (int i=0;i<index;i++) {
			current=current.next;
		}
		return current.data;		
	}
    public void set(int index, int element) {
		Node current=head; 
		for (int i=0;i<index;i++) {
			current=current.next;
			
		}
		current.data=element;
	}
    public void clear() {
		  // not sure!
		head=null;
	}
    public boolean isEmpty() {
		return (head==null);
		
			
	}
    public void remove(int index) {
		Node current=head;
		if (index==0) { head=head.next; return;}
		if (index+1>size()) { System.out.println("Out Of Size");return; }
		
		for (int i=0;i<=index-2;i++)
			current=current.next;
		Node n=current.next;
		current.next=n.next;
		Node x=n.next;
		x.prev=current;
		
	}
    public int size() {
		Node current=head; int size=0;
		while (current!=null) {
			size++; current=current.next;}
		return size;
		
			
	}
    public doubleList sublist(int fromIndex, int toIndex) {
		Node current=head;
		for (int i=0;i<=fromIndex-1;i++)
			current=current.next;
		doubleList l2=new doubleList();
		l2.head=current; 
		for (int i=fromIndex;i<=toIndex-1;i++)
			current=current.next;
	current.next=null;
		
		
		l2.print();
		return l2;
		
	}
    public boolean contains(int o) {
		Node current=head;
		while (current!=null) {
			if (current.data==o) return true;
			current=current.next;
		}
		return false;
		
	}
    public void print () {
		Node current=head;
		while (current!=null) {
			System.out.println(current.data+",");
			current=current.next;
		}
	}
    


}

/////////////////////////
////////////////////


public class way {


		 LinkedPolynomial x=new LinkedPolynomial();
		  LinkedPolynomial y=new LinkedPolynomial();
		  LinkedPolynomial z=new LinkedPolynomial();
		
		  //set polynomial
		  void setPolynomial(char poly, int[][] terms) {
			  LinkedPolynomial.Node a=new LinkedPolynomial.Node (terms[0][0],terms[0][1]);
			  if (poly=='A') { x.head=a;
			  LinkedPolynomial.Node current=x.head;
			  for (int i=1;i<terms.length;i++) {
					x.add(terms[i][0], terms[i][1]);
				  }
			  current=x.head;
			  for (int i=0;i<terms.length;i++) {
				  System.out.println(current.coef+"\n"+current.exp); 
				  current=current.next;
			  }
			  }
			  if (poly=='B') {y.head=a;
			  LinkedPolynomial.Node current=y.head;
			  for (int i=1;i<terms.length;i++) {
					y.add(terms[i][0], terms[i][1]);
				  }
			  current=y.head;
			  for (int i=0;i<terms.length;i++) {
				  System.out.println(current.coef+"\n"+current.exp); 
				  current=current.next;
			  }
			  }
			  if (poly=='C') { z.head=a;
			  LinkedPolynomial.Node current=z.head;
			  for (int i=1;i<terms.length;i++) {
					z.add(terms[i][0], terms[i][1]);
				  }
			  current=z.head;
			  for (int i=0;i<terms.length;i++) {
				  System.out.println(current.coef+"\n"+current.exp); 
				  current=current.next;
			  }
			  }
			  
			  
		  }
		  String print(char poly) {
			  if (poly=='A') 
		  }
		  
		  /////////
		  ////////////
		  //////////////
		  //clear polynomial
	  void clearPolynomial(char poly) {
		  if(poly=='A') {
			  int i=0;
			  int j;
			 LinkedPolynomial.Node current=x.head;
			 while(current!=null) {
				 i++;
				 current=current.next;
			 }
			 current=x.head;
			 for(j=0;j<i;j++) {
				 current.coef=0;
				 current=current.next;
			 }
			 
		  }
		  
		  if(poly=='B') {
			  int i=0;
			  int j;
			 LinkedPolynomial.Node current=y.head;
			 while(current!=null) {
				 i++;
				 current=current.next;
			 }
			 current=y.head;
			 for(j=0;j<i;j++) {
				 current.coef=0;
				 current=current.next;
			 }
			 
		  }
		  
		  if(poly=='C') {
			  int i=0;
			  int j;
			 LinkedPolynomial.Node current=z.head;
			 while(current!=null) {
				 i++;
				 current=current.next;
			 }
			 current=z.head;
			 for(j=0;j<i;j++) {
				 current.coef=0;
				 current=current.next;
			 }
			 
		  }
		  
	  }
		  

	

}


