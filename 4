 
  String print(char poly) {
	  LinkedPolynomial.Node current=null;
	  RuntimeException es = new RuntimeException();
	  if (poly=='A') { current=x.head; if (x.head==null ) throw es; }
	  if (poly=='B') { current=y.head; if (y.head==null ) throw es; }
	  if (poly=='C') { current=z.head; if (z.head==null ) throw es; }
	  
		  String s=new String();
		  while (current.coef!=0) {
				 if (current.coef!=1) {
				 String d=String.format(" %d%s%d", current.coef,"x^", current.exp); 
				 s=s+d;}
				 else {
				 String d =String.format("%s%d", "x^",current.exp); 
				 s=s+d; }
				 if (current.next.coef!=0) { 
				 String z=new String("+"); 
				 s=s+z;}
				 
				 current=current.next;
				 
		  }
		  return s;
  }
 
 
 //multiply two polynomials
 int[][] multiply(char poly1, char poly2){
	  int limit=0;
	  int count1=0;
	  int count2=0;
	  int temb;
	  int temp1;
	  int temp2;
	  int arr1[][]=new int[100000][2];
	  
		  LinkedPolynomial.Node current1=null;
		  LinkedPolynomial.Node current2=null;
		  RuntimeException es=new RuntimeException();
		  
		  if(poly1=='A' &&poly2=='B'){
			  current1=x.head;
			  current2=y.head; 
			  if(current1==null || current2==null) 
				  throw es;
			  }
		  
		  if(poly1=='B' &&poly2=='A'){
			  current1=y.head;
			  current2=x.head; 
			  if(current1==null || current2==null) 
				  throw es;
			  }
		  
		  if(poly1=='A' &&poly2=='C'){
			  current1=x.head;
			  current2=z.head; 
			  if(current1==null || current2==null) 
				  throw es;
			  }
		  if(poly1=='C' &&poly2=='A'){
			  current1=z.head;
			  current2=x.head; 
			  if(current1==null || current2==null) 
				  throw es;
			  }
		  if(poly1=='C' &&poly2=='B'){
			  current1=z.head;
			  current2=y.head; 
			  if(current1==null || current2==null) 
				  throw es;
			  }
		  
		  if(poly1=='B' &&poly2=='C'){
			  current1=y.head;
			  current2=z.head; 
			  if(current1==null || current2==null) 
				  throw es;
			  }
		  
		  while(current1.coef!=0) {
			  count1++;
			  current1=current1.next;
		  }
		  current1=x.head;
		  while(current2.coef!=0) {
			  count2++;
			  current2=current2.next;
		  }
		  current2=y.head;
		  for(int i=0;i<count1;i++) {
			  for(int j=0;j<count2;j++) {
				  arr1[limit][0]=(current1.coef)*(current2.coef);
				  arr1[limit][1]=(current1.exp)+(current2.exp);
				  limit++;
				  current2=current2.next;
			  }
			  current2=y.head;
			  current1=current1.next;
		  }
		  
		  //sum
		  for(int i=0;i<limit;i++) {
			  temb=arr1[i][1];
			  for(int j=i+1;j<limit;j++) {
				  if(temb==arr1[j][1]) {
					  arr1[i][0]+=arr1[j][0];
					  arr1[j][0]=0;
					  arr1[j][1]=0;
				  }
			  }
		  }
		  
		  //sorting
		  for(int i=0;i<limit-1;i++) {
				temb=arr1[i][1];
				temp2=i;
				for(int j=i;j<limit;j++) {
					if(arr1[j][1]>temb) {
						temb=arr1[j][1];
						temp2=j;
					}
				}
				temp1=arr1[i][1];
				arr1[i][1]=temb;
				arr1[temp2][1]=temp1;
				
				temp1=arr1[i][0];
				arr1[i][0]=arr1[temp2][0];
				arr1[temp2][0]=temp1;
				
			}
		  
	  
	  
	 
	  return arr1;
	  
 }
